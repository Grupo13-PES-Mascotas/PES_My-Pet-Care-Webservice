import io.franzbecker.gradle.lombok.task.DelombokTask

plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id 'java'
    id 'jacoco'
    id 'maven'
}

group = 'com.github.Grupo13-PES-Mascotas'
version = '2.0.3'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'com.google.apis:google-api-services-calendar:v3-rev20200610-1.30.10'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.google.firebase:firebase-admin:6.13.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.11.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
}

test {
    outputs.dir snippetsDir as Object
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

install {
    dependsOn assemble
}

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }

    def fileFilter = ['**/*Test*.*', '**/entity/**', '**/error/**', '**/*Factory.class', '**/form/**', '**/Web*.class',
                        '**/*Service.class', '**/*Dao.class', '**/FirestoreDocument.class', '**/FirestoreCollection.class']
    def debugTree = fileTree(dir: "${buildDir}/classes/", excludes: fileFilter)

    classDirectories.from = files([debugTree])

    dependsOn test
}
